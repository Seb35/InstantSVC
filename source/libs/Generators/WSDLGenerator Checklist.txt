4.1 Required Description
------------------------
[x]Either an INSTANCE's WSDL 1.1 description, its UDDI binding template, or both MUST be available to an authorized consumer upon request.
// wir erzeugen ja das WSDL
->This means that if an authorized consumer requests a service description of a conformant service instance, then the service instance provider must make the WSDL document, the UDDI binding template, or both available to that consumer. A service instance may provide run-time access to WSDL documents from a server, but is not required to do so in order to be considered conformant. Similarly, a service instance provider may register the instance provider in a UDDI registry, but is not required to do so to be considered conformant. In all of these scenarios, the WSDL contract must exist, but might be made available through a variety of mechanisms, depending on the circumstances.

4.2 Document Structure
----------------------

-=4.2.1 WSDL Schema Definitions=-
 // schema validation durchführen, dann eintragen
 [?]A DESCRIPTION using the WSDL namespace (prefixed "wsdl" in this Profile) MUST be valid according to the XML Schema found at "http://schemas.xmlsoap.org/wsdl/2003-02-11.xsd".
 // bitte mal checken falko ;)
 [?]A DESCRIPTION using the WSDL SOAP binding namespace (prefixed "soapbind" in this Profile) MUST be valid according to the XML Schema found at "http://schemas.xmlsoap.org/wsdl/soap/2003-02-11.xsd".

-=4.2.2 WSDL and Schema Import=-
 // keine Imports
 [x]A DESCRIPTION MUST only use the WSDL "import" statement to import another WSDL description.
 [x]In a DESCRIPTION, the namespace attribute of the wsdl:import MUST NOT be a relative URI.
 [x]To import XML Schema Definitions, a DESCRIPTION MUST use the XML Schema "import" statement.
 [x]A DESCRIPTION MUST use the XML Schema "import" statement only within the xsd:schema element of the types section.
 [x]In a DESCRIPTION the schemaLocation attribute of an xsd:import element MUST NOT resolve to any document whose root element is not "schema" from the namespace "http://www.w3.org/2001/XMLSchema".
 [x]An XML Schema directly or indirectly imported by a DESCRIPTION MAY include the Unicode Byte Order Mark (BOM).
 [x]An XML Schema directly or indirectly imported by a DESCRIPTION MUST use either UTF-8 or UTF-16 encoding.
 [x]An XML Schema directly or indirectly imported by a DESCRIPTION MUST use version 1.0 of the eXtensible Markup Language W3C Recommendation.

-=4.2.3 WSDL Import location Attribute Structure=-
 [x]A DESCRIPTION MUST specify a non-empty location attribute on the wsdl:import element.
 // keine Imports

-=4.2.4 WSDL Import location Attribute Semantics=-
 [x]A CONSUMER MAY, but need not, retrieve a WSDL description from the URI specified in the location attribute on a wsdl:import element.
 // keine Imports

-=4.2.5 Placement of WSDL import Elements=-
 [x]When they appear in a DESCRIPTION, wsdl:import elements MUST precede all other elements from the WSDL namespace except wsdl:documentation.
 // keine Imports vorgesehen
 [x]When they appear in a DESCRIPTION, wsdl:types elements MUST precede all other elements from the WSDL namespace except wsdl:documentation and wsdl:import.
 // wird bei uns als 1. DOMNode erzeugt
-=4.2.6 XML Version Requirements=-
 [x]A DESCRIPTION MUST use version 1.0 of the eXtensible Markup Language W3C Recommendation.
 // geht gar nicht anders
-=4.2.7 XML Namespace declarations=-
 [x]A DESCRIPTION SHOULD NOT contain the namespace declaration xmlns:xml="http://www.w3.org/XML/1998/namespace".
 // alte Version wird nicht genutzt 
-=4.2.8 WSDL and the Unicode BOM=-
 [x]A DESCRIPTION MAY include the Unicode Byte Order Mark (BOM).
 // no need
-=4.2.9 Acceptable WSDL Character Encodings=-
 [x]A DESCRIPTION MUST use either UTF-8 or UTF-16 encoding.
 // ja, DOMNode ist UTF-8
-=4.2.10 Namespace Coercion=-
 [x]The targetNamespace attribute on the wsdl:definitions element of a description that is being imported MUST have same the value as the namespace attribute on the wsdl:import element in the importing DESCRIPTION.
 // nicht nötig
-=4.2.11 WSDL documentation Element=-
 [x]In a DESCRIPTION the wsdl:documentation element MAY be present as the first child element of wsdl:import, wsdl:part and wsdl:definitions in addition to the elements cited in the WSDL1.1 specification.
 //betrifft uns nicht
-=4.2.12 WSDL Extensions=-
 // keine extensions, also alles passend
 [x]A DESCRIPTION containing WSDL extensions MUST NOT use them to contradict other requirements of the Profile.
 [x]A DESCRIPTION SHOULD NOT include extension elements with a wsdl:required attribute value of "true" on any WSDL construct (wsdl:binding, wsdl:portType, wsdl:message, wsdl:types or wsdl:import) that claims conformance to the Profile.
 [x]If during the processing of a description, a consumer encounters a WSDL extension element that has a wsdl:required attribute with a boolean value of "true" that the consumer does not understand or cannot process, the CONSUMER MUST fail processing.

4.3 Types
---------

-=4.3.1 QName References=-
 [x]A DESCRIPTION MUST NOT use QName references to WSDL components in namespaces that have been neither imported, nor defined in the referring WSDL document.
 // niemand qualifiziert Namespaces, die nicht eingebunden sind
 [x]A QName reference to a Schema component in a DESCRIPTION MUST use the namespace defined in the targetNamespace attribute on the xsd:schema element, or to a namespace defined in the namespace attribute on an xsd:import element within the xsd:schema element has xsd:import and/or xsd:annotation as its only child element(s).
 // wir verweisen höchstens auf "xsd","tns" und "types"

-=4.3.2 Schema targetNamespace Structure=-
 [x] All xsd:schema elements contained in a wsdl:types element of a DESCRIPTION MUST have a targetNamespace attribute with a valid and non-null value, UNLESS the xsd:schema element has xsd:import and/or xsd:annotation as its only child element(s).
 // targetNamespace wird gesetzt

-=4.3.3 soapenc:Array=-
 // alle sind ok, da es hier nur um LITERAL geht
 // wenn wir also RPC ENC machen, dann dürfen wir das nutzen
 // da es bei DOC und RPC Literal aber nicht genutzt wird, sind die bestanden
 [x]In a DESCRIPTION, declarations MUST NOT extend or restrict the soapenc:Array type.
 [x]In a DESCRIPTION, declarations MUST NOT use wsdl:arrayType attribute in the type declaration.
 [f]In a DESCRIPTION, elements SHOULD NOT be named using the convention ArrayOfXXX.
 // we do, but we know what we are doing :)
 [x]An ENVELOPE MUST NOT include the soapenc:arrayType attribute.

-=4.3.4 WSDL and Schema Definition Target Namespaces=-
 [x]The target namespace for WSDL definitions and the target namespace for schema definitions in a DESCRIPTION MAY be the same.

4.4 Messages
------------

-=4.4.1 Bindings and Parts=-
 [x]A document-literal binding in a DESCRIPTION MUST, in each of its soapbind:body element(s), have at most one part listed in the parts attribute, if the parts attribute is specified.
 // wir haben da eigentlich KEIN part-element, ansonsten, da DOC, wird auch überall höchstens ein part erzeugt...
 [f]A wsdl:binding in a DESCRIPTION SHOULD bind every wsdl:part of a wsdl:message in the wsdl:portType to which it refers with a binding extension element.
 // well, TODO
 [x]If a document-literal binding in a DESCRIPTION does not specify the parts attribute on a soapbind:body element, the corresponding abstract wsdl:message MUST define zero or one wsdl:parts.
 // messages sind komplett mit einem/keinem part-Element
 [x]A wsdl:binding in a DESCRIPTION MAY contain soapbind:body element(s) that specify that zero parts form the soap:Body.
 [x]An rpc-literal binding in a DESCRIPTION MUST refer, in its soapbind:body element(s), only to wsdl:part element(s) that have been defined using the type attribute.
 // betrifft uns nicht, siehe 2 drüber
 [x]An ENVELOPE described with an rpc-literal binding MUST NOT have the xsi:nil attribute with a value of "1" or "true" on the part accessors.
 // Laut WSDLGenerator003RPCLIT
 [x]A wsdl:message in a DESCRIPTION MAY contain wsdl:parts that use the elements attribute provided those wsdl:parts are not referred to by a soapbind:body in an rpc-literal binding.
 // trifft nicht zu, da RPC LITERAL alle parts über "Type" identifiziert und "Element" nur bei DOC LIT genutzt wird, wobei hier die "Soap:Body"s leer bleiben
 [x]A document-literal binding in a DESCRIPTION MUST refer, in each of its soapbind:body element(s), only to wsdl:part element(s) that have been defined using the element attribute.
 // betrifft uns nicht, siehe weiter oben
 [x]A binding in a DESCRIPTION MAY contain soapbind:header element(s) that refer to wsdl:parts in the same wsdl:message that are referred to by its soapbind:body element(s).
 // wir nutzen keine HEADER-Elemente
 [x]An ENVELOPE MUST contain exactly one part accessor element for each of the wsdl:part elements bound to the envelope's corresponding soapbind:body element.
 [?]In a doc-literal description where the value of the parts attribute of soapbind:body is an empty string, the corresponding ENVELOPE MUST have no element content in the soap:Body element.
 [?]In a rpc-literal description where the value of the parts attribute of soapbind:body is an empty string, the corresponding ENVELOPE MUST have no part accessor elements.
 // BITTE CHECKEN, da wir da einige Sachen geändert haben, um die Interop-Tests zu bestehen

also:

Use of wsdl:message elements with zero parts is permitted in Document styles to permit operations that can send or receive envelopes with empty soap:Bodys. Use of wsdl:message elements with zero parts is permitted in RPC styles to permit operations that have no (zero) parameters and/or a return value.

For document-literal bindings, the Profile requires that at most one part, abstractly defined with the element attribute, be serialized into the soap:Body element.

When a wsdl:part element is defined using the type attribute, the serialization of that part in a message is equivalent to an implicit (XML Schema) qualification of a minOccurs attribute with the value "1", a maxOccurs attribute with the value "1" and a nillable attribute with the value "false".

It is necessary to specify the equivalent implicit qualification because the wsdl:part element does not allow one to specify the cardinality and nillability rules. Specifying the cardinality and the nillability rules facilitates interoperability between implementations. The equivalent implicit qualification for nillable attribute has a value of "false" because if it is specified to be "true" one cannot design a part whereby the client is always required to send a value. For applications that want to allow the wsdl:part to to be nillable, it is expected that applications will generate a complexType wrapper and specify the nillability rules for the contained elements of such a wrapper.

-=4.4.2 Bindings and Faults=-
 [?]A wsdl:binding in a DESCRIPTION MUST refer, in each of its soapbind:header, soapbind:headerfault and soapbind:fault elements, only to wsdl:part element(s) that have been defined using the element attribute.
 // sowas machen wir nicht, sondern der Client, i guess...

-=4.4.3 Declaration of part Elements=-
 [x]A wsdl:message in a DESCRIPTION containing a wsdl:part that uses the element attribute MUST refer, in that attribute, to a global element declaration.
 // wir referenzieren unsere eigene Type-section - passt also

4.5 Port Types
--------------

-=4.5.1 Ordering of part Elements=-
 [x]The order of the elements in the soap:body of an ENVELOPE MUST be the same as that of the wsdl:parts in the wsdl:message that describes it.
 // wird automatisch so umgesetzt, haben wir also nichts mit zu tun
 [x]A DESCRIPTION MAY use the parameterOrder attribute of an wsdl:operation element to indicate the return value and method signatures as a hint to code generators. 
 // geht auch ohne, gerade bei DOC LIT

-=4.5.2 Allowed Operations=-
 [x]A DESCRIPTION MUST NOT use Solicit-Response and Notification type operations in a wsdl:portType definition.
 // wir verschicken IMMER eine Antwort, auch wenn sie leer sein sollte

-=4.5.3 Distinctive Operations=-
 [x]A wsdl:portType in a DESCRIPTION MUST have operations with distinct values for their name attributes.
 // Überladungen werden von PHP NICHT unterstützt, also kann kein Name doppelt vorkommen
 // Dennoch: TODO: decide if check for double names is necessary

-=4.5.4 parameterOrder Attribute Construction=-
 [x]A wsdl:operation element child of a wsdl:portType element in a DESCRIPTION MUST be constructed so that the parameterOrder attribute, if present, omits at most 1 wsdl:part from the output message.
 // not present -> betrifft uns nicht

-=4.5.5 Exclusivity of type and element Attributes=-
 [x]A wsdl:message in a DESCRIPTION MUST NOT specify both type and element attributes on the same wsdl:part.
 // rpc benutzt ausschließlich die TYPEs und DOC/LIT nutzt ausschließlich die ELEMENTs

4.6 Bindings
------------

-=4.6.1 Use of SOAP Binding=-
 [x]A wsdl:binding element in a DESCRIPTION MUST use WSDL SOAP Binding as defined in WSDL 1.1 Section 3.
 // wird automatisch so erzeugt

4.7 SOAP Binding
----------------

-=4.7.1 Specifying the transport Attribute=-
 [x]The wsdl:binding element in a DESCRIPTION MUST be constructed so that its soapbind:binding child element specifies the transport attribute.
 // wird automatisch so erzeugt

-=4.7.2 HTTP Transport=-
 [x]A wsdl:binding element in a DESCRIPTION MUST specify the HTTP transport protocol with SOAP binding. Specifically, the transport attribute of its soapbind:binding child MUST have the value "http://schemas.xmlsoap.org/soap/http".
 // wird automatisch so erzeugt

-=4.7.3 Consistency of style Attribute=-
 [x]A wsdl:binding in a DESCRIPTION MUST either be a rpc-literal binding or a document-literal binding.
 // wir können aber auch RPC/Enc

-=4.7.4 Encodings and the use Attribute=-
 [x]A wsdl:binding in a DESCRIPTION MUST use the value of "literal" for the use attribute in all soapbind:body, soapbind:fault, soapbind:header and soapbind:headerfault elements.
 // bei uns geht aber auch ENCODED

-=4.7.5 Multiple Bindings for portType Elements=-
 [x]A wsdl:portType in a DESCRIPTION MAY have zero or more wsdl:bindings that refer to it, defined in the same or other WSDL documents.
 // wir erzeugen alles nur ein Mal

-=4.7.6 Operation Signatures=-
 [x]The operations in a wsdl:binding in a DESCRIPTION MUST result in operation signatures that are different from one another.
 // Namensgebung ist konsistent und verhindert doppelte Namen

-=4.7.7 Multiple Ports on an Endpoint=-
 [x]A DESCRIPTION SHOULD NOT have more than one wsdl:port with the same value for the location attribute of the soapbind:address element.
 // wir erzeugen nur EINEN Port

-=4.7.8 Child Element for Document-Literal Bindings=-
 [x]A document-literal binding MUST be serialized as an ENVELOPE with a soap:Body whose child element is an instance of the global element declaration referenced by the corresponding wsdl:message part.

-=4.7.9 One-Way Operations=-
 [x]For one-way operations, an INSTANCE MUST NOT return a HTTP response that contains an envelope. Specifically, the HTTP response entity-body must be empty.
 // betrifft uns nicht, da wir two-way arbeiten
 [x]A CONSUMER MUST ignore an envelope carried in a HTTP response message in a one-way operation.
 // betrifft uns nicht
 [x]For one-way operations, a CONSUMER MUST NOT interpret a successful HTTP response status code (i.e., 2xx) to mean the message is valid or that the receiver would process it. 
 // betrifft uns nicht

-=4.7.10 Namespaces for soapbind Elements=-
 // <soap:body namespace="http://www.example.org/webservices/WSDLGenerator003doclit" soapAction="http://www.example.org/webservices/WSDLGenerator003doclit" use="literal">
 // aber: nächster Punkt!
 [f]A document-literal binding in a DESCRIPTION MUST NOT have the namespace  attribute specified on contained soapbind:body,  soapbind:header, soapbind:headerfault and  soapbind:fault elements.
 // muss also in Abhängigkeit hinzugefügt werden!!!
 [x]An rpc-literal binding in a DESCRIPTION MUST have the namespace attribute specified, the value of which MUST be an absolute URI, on contained  soapbind:body elements.
 // die nutzen wir nicht
 [x]An rpc-literal binding in a DESCRIPTION MUST NOT have the namespace attribute specified on contained soapbind:header, soapbind:headerfault and soapbind:fault elements. 

-=4.7.11 Consistency of portType and binding Elements=-
 // wird automatisch so erzeugt
 [x]A wsdl:binding in a DESCRIPTION MUST have the same set of  wsdl:operations as the wsdl:portType to which it refers.

-=4.7.12 Describing headerfault Elements=-
 // ja, genau so haben wir es ;)
 [x]A wsdl:binding in a DESCRIPTION MAY contain no  soapbind:headerfault elements if there are no known header faults.

-=4.7.13 Enumeration of Faults=-
 // können wir nicht machen
 [f]A wsdl:binding in a DESCRIPTION SHOULD contain a  soapbind:fault describing each known fault.
 [f]A wsdl:binding in a DESCRIPTION SHOULD contain a soapbind:headerfault describing each known header fault.
 // MAY und wir nutzen es nicht - bestanden
 [x]An ENVELOPE MAY contain fault with a detail element that is not described by a soapbind:fault element in the corresponding WSDL description.
 // MAY und wir nutzen es nicht - bestanden
 [x]An ENVELOPE MAY contain the details of a header processing related fault in a SOAP header block that is not described by a soapbind:headerfault element in the corresponding WSDL description. 

-=4.7.14 Type and Name of SOAP Binding Elements=-
 // wir haben keine solchen "erweiterten SOAPBind-elemente"
 [x]A wsdl:binding in a DESCRIPTION MUST use the part attribute with a schema type of "NMTOKEN" on all contained soapbind:header and soapbind:headerfault elements.
 [x]A wsdl:binding in a DESCRIPTION MUST NOT use the parts attribute on contained soapbind:header and soapbind:headerfault elements. -> The WSDL Schema gives the attribute's name as "parts" and its type as "NMTOKENS". The schema is incorrect since each soapbind:header and soapbind:headerfault element references a single wsdl:part.

-=4.7.15 name Attribute on Faults=-
 // nutzen wir ebenfalls nicht
 [x]A wsdl:binding in a DESCRIPTION MUST have the name  attribute specified on all contained soapbind:fault elements.
 [x]In a DESCRIPTION, the value of the name attribute on a soapbind:fault element MUST match the value of the name attribute on its parent wsdl:fault element.

-=4.7.16 Omission of the use Attribute=-
 // betrifft uns nicht
 [x]A wsdl:binding in a DESCRIPTION MAY specify the use attribute on contained soapbind:fault elements.
 [x]If in a wsdl:binding in a DESCRIPTION the use attribute on a contained soapbind:fault element is present, its value MUST be "literal". 

-=4.7.17 Default for use Attribute=-
 // betrifft uns nicht bzw. nur Client
 [x]A wsdl:binding in a DESCRIPTION that contains one or more  soapbind:body, soapbind:fault, soapbind:header or  soapbind:headerfault elements that do not specify the use attribute MUST be interpreted as though the value "literal" had been specified in each case.

-=4.7.18 Consistency of Envelopes with Descriptions=-
 // den Client betreffend
 [x]If an INSTANCE receives an envelope that is inconsistent with its WSDL description, it SHOULD generate a soap:Fault with a faultcode of "Client", unless a "MustUnderstand" or "VersionMismatch" fault is generated.
 [x]If an INSTANCE receives an envelope that is inconsistent with its WSDL description, it MUST check for "VersionMismatch", "MustUnderstand" and "Client" fault conditions in that order. 

-=4.7.19 Response Wrappers=-
 [x]An ENVELOPE described with an rpc-literal binding that is a response MUST have a wrapper element whose name is the corresponding wsdl:operation name suffixed with the string "Response".
 // ist so - alle Antworten haben "Response" am Ende
-=4.7.20 Part Accessors=-
 // bitte mal checken falko
 [?]An ENVELOPE described with an rpc-literal binding MUST place the part accessor elements for parameters and return value in no namespace.
 [x]The part accessor elements in a MESSAGE described with an rpc-literal binding MUST have a local name of the same value as the name attribute of the corresponding wsdl:part element.

-=4.7.21 Namespaces for Children of Part Accessors=-
 // bei RPCLIT ist überall ein NS-Qualifier dabei
 [x]An ENVELOPE described with an rpc-literal binding MUST namespace qualify the descendents of part accessor elements for the parameters and the return value, as defined by the schema in which the part accessor types are defined.

-=4.7.22 Required Headers=-
 [x]An ENVELOPE MUST include all soapbind:headers specified on a wsdl:input or wsdl:output of a wsdl:operation of a wsdl:binding that describes it.
 // würde er sicherlich tun, wenn wir ihn nutzen würden

-=4.7.23 Allowing Undescribed Headers=-
 // nutzen wir immer noch nicht
 [x]An ENVELOPE MAY contain SOAP header blocks that are not described in the wsdl:binding  that describes it.
 [x]An ENVELOPE containing SOAP header blocks that are not described in the appropriate wsdl:binding MAY have the mustUnderstand attribute on such SOAP header blocks set to '1'. 

-=4.7.24 Ordering Headers=-
 // betrifft uns nicht
 [x]The order of soapbind:header elements in soapbind:binding  sections of a DESCRIPTION MUST be considered independent of the order of SOAP header blocks in the envelope.
 [x]An ENVELOPE MAY contain more than one instance of each SOAP header block for each soapbind:header element in the appropriate child of soapbind:binding in the corresponding description. 

-=4.7.25 Describing SOAPAction=-
 // betrifft uns nicht
 [x]A HTTP request MESSAGE MUST contain a SOAPAction HTTP header field with a quoted value equal to the value of the soapAction attribute of soapbind:operation, if present in the corresponding WSDL description.
 [x]A HTTP request MESSAGE MUST contain a SOAPAction HTTP header field with a quoted empty string value, if in the corresponding WSDL description, the soapAction of soapbind:operation is either not present, or present with an empty string as its value. 

-=4.7.26 SOAP Binding Extensions=-
 // betrifft uns nicht
 [x]A CONSUMER MUST understand and process all WSDL 1.1 SOAP Binding extension elements, irrespective of the presence or absence of the wsdl:required attribute on an extension element; and irrespective of the value of the wsdl:required attribute, when present.
 [x]A CONSUMER MUST NOT interpret the presence of the wsdl:required attribute on a soapbind extension element with a value of "false" to mean the extension element is optional in the envelopes generated from the WSDL description.

4.8 Use of XML Schema
---------------------

 [x]A DESCRIPTION MAY use any construct from XML Schema 1.0.
 // wir können, müssen aber nicht
 [x]A DESCRIPTION MUST use XML Schema 1.0 Recommendation as the basis of user defined datatypes and structures. 
 // wird von uns auf dieser Basis erzeugt
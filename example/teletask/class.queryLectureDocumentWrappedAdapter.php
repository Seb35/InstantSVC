<?php
require_once('../../../../../../../../../../../../../p/sst/WebP/source/repo/example/teletask/libs/queryLecture.php');

/**
 * auto-generated document-wrapped adapter class for class `queryLecture'
 *
 * The class will make the unwrapping arguments and the
 * wrapping of return values.
 *
 * generated by DocumentWrappedAdapterGenerator
 */
class queryLectureDocumentWrappedAdapter {

    /**
     * @var queryLecture
     */
    private $target;

    /**
     * @param queryLecture $target
     */
    public function __construct($target = null) {
        if (empty($target)) {
			//May be we have a singleton class, just check for some common names
			if (is_callable(array('queryLecture', '__contruct'), false)) {
		       $obj = new queryLecture();
		    }
			elseif (is_callable(array('queryLecture', 'getInstance'), false)) {
			   $obj = call_user_func(array('queryLecture', 'getInstance'));
		    }
		    elseif (is_callable(array('queryLecture', 'getSingleton'), false)) {
		       $obj = call_user_func(array('queryLecture', 'getSingleton'));
		    }
            $this->target = $obj;
        } else {
            $this->target = $target;
        }
    }

    /**
     * @param object $args
     * @return array<string,Lecture[]>
     */
    public function getAllLectures() {
        return array('getAllLecturesResult' => $this->target->getAllLectures());
    }

    /**
     * @param object $args
     * @return array<string,Lecture>
     */
    public function getLecture($args) {
        return array('getLectureResult' => $this->target->getLecture($args->id));
    }

    /**
     * @param object $args
     * @return array<string,mixed>
     */
    public function updateOrAddLecture($args) {
        return array('updateOrAddLectureResult' => $this->target->updateOrAddLecture($args->lecture));
    }

    /**
     * @param object $args
     * @return array<string,string[]>
     */
    public function getIdAndNameOfAllLectures() {
        return array('getIdAndNameOfAllLecturesResult' => $this->target->getIdAndNameOfAllLectures());
    }

    /**
     * @param object $args
     * @return array<string,string>
     */
    public function getLectureNameById($args) {
        return array('getLectureNameByIdResult' => $this->target->getLectureNameById($args->id));
    }

    /**
     * @param object $args
     * @return array<string,string[]>
     */
    public function getAbstractbyName($args) {
        return array('getAbstractbyNameResult' => $this->target->getAbstractbyName($args->name));
    }

    /**
     * @param object $args
     * @return array<string,mixed>
     */
    public function updateLectureNameById($args) {
        return array('updateLectureNameByIdResult' => $this->target->updateLectureNameById($args->id, $args->name));
    }

    /**
     * @param object $args
     * @return array<string,Lecture[]>
     */
    public function getLecturesByLecturegroups($args) {
        return array('getLecturesByLecturegroupsResult' => $this->target->getLecturesByLecturegroups($args->lecturegroupName));
    }

    /**
     * @param object $args
     * @return array<string,Lecture[]>
     */
    public function getLecturesByAuthor($args) {
        return array('getLecturesByAuthorResult' => $this->target->getLecturesByAuthor($args->authorName));
    }

    /**
     * @param object $args
     * @return array<string,Lecture[]>
     */
    public function getLecturesBySpeaker($args) {
        return array('getLecturesBySpeakerResult' => $this->target->getLecturesBySpeaker($args->speakerName));
    }

    /**
     * @param object $args
     * @return array<string,Lecture[]>
     */
    public function getLecturesByLanguage($args) {
        return array('getLecturesByLanguageResult' => $this->target->getLecturesByLanguage($args->language));
    }

    /**
     * @param object $args
     * @return array<string,Lecture[]>
     */
    public function _getItemsFromResult() {
        return array('_getItemsFromResultResult' => $this->target->_getItemsFromResult());
    }

    /**
     * @param object $args
     * @return array<string,queryLecture>
     */
    public function getInstance($args) {
        return array('getInstanceResult' => $this->target->getInstance($args->class));
    }

    /**
     * @param object $args
     * @return array<string,Item[]>
     */
    public function getItems($args) {
        return array('getItemsResult' => $this->target->getItems($args->condition, $args->start, $args->count, $args->properties, $args->sort));
    }

    /**
     * @param object $args
     * @return array<string,mixed>
     */
    public function flushItems() {
        return array('flushItemsResult' => $this->target->flushItems());
    }

    /**
     * @param object $args
     * @return array<string,mixed>
     */
    public function deleteItem($args) {
        return array('deleteItemResult' => $this->target->deleteItem($args->id));
    }

    /**
     * @param object $args
     * @return array<string,mixed>
     */
    public function _deleteItem($args) {
        return array('_deleteItemResult' => $this->target->_deleteItem($args->id));
    }

}
?>

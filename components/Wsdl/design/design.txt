eZ component: WSDL, Design
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Introduction
============

Description
-----------
The WSDL component generates a WSDL document from a given service
implementation. The WSDL generator utilizes the Reflection component and the
Document Object Model (DOM) to create service descriptions in a very structured
way.


Design description
------------------

ezcWsdlGenerator
	This class implements the algorithms for WSDL generation. The class diagram
	shows all public methods which can be used to configure the generation
    process and obtain the resulting WSDL document in various formats.

ezcWsdlGeneratorPolicy
	As stated in the requirements document the WSDL generator should use
	Web Service annotations to determine which functions to publish in the
	service description. Furthermore it should be capable of copying the
	documentation for operations from the source code to the WSDL document. But
	the software projects using the generator may have different opinions about
	which methods should be selected for publication and how much documentation
	should be incorporated. Hence the generator is extensible in a way that
	users can provide own implementations of the interface
	ezcWsdlGeneratorPolicy.

ezcWsdlGeneratorDefaultPolicy
	The default implementation of the policy interface is used if no user
	defined implementation is provided. It uses the annotation @webmethod to
	identify methods for publication and provides the short description from the
	PHPDoc comment of each method as documentation for the corresponding WSDL
	operation.


Guidelines
----------
It must not be possible to combine the methods setClass and addFunction of
ezcWsdlGenerator because this


Algorithms
----------
Through the utilization of the Reflection component and the DOM API the methods
of the WSDL generator only have to perform the mapping between language
constructs and XML elements.

As shown in the method call graph of the WSDL generator each WSDL element type,
e.g. Operation, PortType or Binding, is generated by a separate method in order
to reduce complexity. At some point recursion is applied for traversing class
and array structures.


Data structures
---------------
In order to avoid redundancy in the types section of a WSDL document the
generator uses arrays for memorizing complex types already found. Besides that
it handles PHP language elements with the help of reflection objects and XML
elements as DOM nodes and DOM attributes.

Testing Since input and output may have a complex structure testing a WSDL
generator can be a challenging task. WSDL is an interface description language
and thus a feasible method to test the generated descriptions is to start a SOAP
server with them and verify if it behaves in the same manner as the input class.
This implies that the SOAP server has to work correctly and that is ensured
through the test cases of the SOAP extension. These test cases probe the entire
Web Service functionality based on manually written WSDL files and also
implement the Web Services interoperability tests of the SOAP Builders
community. Therefore they can be leveraged to test the WSDL generator by
replacing the WSDL documents of the test cases with generated versions and
comparing if the results are the same.

The test cases of the SOAP extension use PHP's test framework which
unfortunately is a conflict with the guidelines of eZ Components stipulating
PHPUnit test cases. Thus it has to be discussed if this exception can be
tolerated for the WSDL component or if it is technically feasible to generate
unit tests from those phpt files.


Diagrams
========

ezcWsdlGenerator.class-diagram.png - Class diagram of ezcWsdlGenerator
ezcWsdlGenerator.callgraph.png - Static call graph of class ezcWsdlGenerator